{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql import functions as F\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from statsmodels.graphics.factorplots import interaction_plot\n",
    "\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml import Pipeline\n",
    "from pyspark.mllib.regression import LabeledPoint\n",
    "from pyspark.mllib.classification import SVMWithSGD\n",
    "from pyspark.mllib.tree import RandomForest\n",
    "from pyspark.ml.classification import RandomForestClassifier\n",
    "from pyspark.ml.evaluation import MulticlassClassificationEvaluator\n",
    "from pyspark.ml.feature import HashingTF, Word2Vec, Tokenizer, StringIndexer, CountVectorizer, IDF,IndexToString,StopWordsRemover"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+\n",
      "|         business_id|        city|                name|review_count|stars|cool|               date|funny|           review_id|review_stars|                text|useful|\n",
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+\n",
      "|kxX2SOes4o-D3ZQBk...|Philadelphia|               Zaika|         181|  4.0|   1|2015-01-04 00:01:03|    0|AqPFMleE6RsU23_au...|         5.0|Wow!  Yummy, diff...|     1|\n",
      "|BVndHaLihEYbr76Z0...|       Tampa|       Mamas Kitchen|         162|  4.5|   0|2014-10-11 16:22:06|    0|OAhBYw8IQ6wlfw1ow...|         5.0|Great place for b...|     0|\n",
      "|YtSqYv1Q_pOltsVPS...|Philadelphia|   Rittenhouse Grill|         290|  3.5|   0|2013-06-24 11:21:25|    0|oyaMhzBSwfGgemSGu...|         5.0|Tremendous servic...|     0|\n",
      "|eFvzHawVJofxSnD7T...|Philadelphia|     Good Karma Cafe|         249|  4.0|   0|2014-11-12 15:30:27|    0|Xs8Z8lmKkosqW5mw_...|         5.0|My absolute favor...|     0|\n",
      "|kq5Ghhh14r-eCxlVm...|Philadelphia|   The Coventry Deli|          65|  4.0|   0|2018-08-23 21:39:38|    0|JBWZmBy69VMggxj3e...|         5.0|My boyfriend and ...|     0|\n",
      "|Zx7n8mdt8OzLRXVzo...|   Nashville|Milk and Honey Na...|        1725|  4.0|   0|2018-04-27 23:03:21|    0|E9AB7V4z8xrt2uPF7...|         5.0|Amazing biscuits ...|     0|\n",
      "|eaJCpC6IhYphj7bwC...|   Nashville|Three Brothers Co...|         249|  4.5|   0|2015-08-30 13:41:47|    0|qGQvUHmC02PAZW3H1...|         5.0|Stopped by after ...|     0|\n",
      "|EtKSTHV5Qx_Q7Aur9...|Philadelphia|     Village Whiskey|        1553|  4.0|   1|2009-10-14 01:15:04|    1|cvQXRFLCyr0S7EgFb...|         5.0|On a scale of one...|     3|\n",
      "|NQSnr4RPUScss607o...|Philadelphia|    Chase's Hop Shop|         116|  4.5|   0|2016-05-19 06:10:14|    0|mCVyppNwK2qPOJHXg...|         5.0|My brother came t...|     0|\n",
      "|HTqXI5S2XcSlh_ylx...|Philadelphia| Termini Bros Bakery|         263|  4.0|   1|2018-03-23 14:35:33|    1|4KpIldEM-tdnrJLqY...|         5.0|I've only had the...|     1|\n",
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+\n",
      "only showing top 10 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "all_reviews = spark.read.csv('/user/ximanw/data/all_reviews.csv', inferSchema=True, header=True, multiLine = True )\n",
    "all_reviews.show(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Indianapolis\n",
    "data_Indianapolis = all_reviews.filter(all_reviews.city == 'Indianapolis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "107834"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data1.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove Puctuation\n",
    "from pyspark.sql.functions import *\n",
    "def removePunctuation(column):\n",
    "    \n",
    "    return lower(trim(regexp_replace(column,'\\\\p{Punct}',''))).alias('sentence')\n",
    "\n",
    "data_Indianapolis = data_Indianapolis.withColumn(\"remove_punc\",removePunctuation(col('text')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+\n",
      "|         business_id|        city|                name|review_count|stars|cool|               date|funny|           review_id|review_stars|                text|useful|         remove_punc|\n",
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+\n",
      "|EQ-TZ2eeD_E0BHuvo...|Indianapolis|           Milktooth|        1379|  4.0|   1|2018-01-10 01:48:58|    0|940tqxFO4Pwg_KMg4...|         5.0|Milktooth is the ...|     2|milktooth is the ...|\n",
      "|gZqFuqTjtN4Bfh-_f...|Indianapolis|     Tandoor & Tikka|         157|  4.0|   0|2018-06-19 15:52:49|    0|NyJwwd6Ylajd9sVAa...|         5.0|Very impressed wi...|     1|very impressed wi...|\n",
      "|z680Aylt8wN2KAeFM...|Indianapolis|Chatham Tap Mass....|         427|  4.0|   0|2015-07-03 21:07:59|    0|M_JypFlbEUklwMGoy...|         5.0|Stopped in on a M...|     0|stopped in on a m...|\n",
      "|EQ-TZ2eeD_E0BHuvo...|Indianapolis|           Milktooth|        1379|  4.0|   1|2016-06-11 21:41:05|    0|S-H-Ao17MEYH9cLpv...|         5.0|Busy place, but w...|     1|busy place but we...|\n",
      "|SlZJATE_TGUU8X34U...|Indianapolis|           La Mulita|         136|  4.0|   1|2015-11-06 01:35:03|    0|L7Z2Re-8aFOZFhfMZ...|         5.0|Holy Mole!\n",
      "That w...|     1|holy mole\n",
      "that wa...|\n",
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data1.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "tokenizer = Tokenizer(inputCol=\"remove_punc\", outputCol=\"words\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#remove stop words\n",
    "remover = StopWordsRemover(inputCol=\"words\", outputCol=\"filtered\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "word2Vec = Word2Vec(vectorSize=50, minCount=0, inputCol=\"filtered\", outputCol=\"wordVectors\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline = Pipeline(stages=[tokenizer,remover,word2Vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Indianapolis = pipeline.fit(data_Indianapolis).transform(data_Indianapolis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|         business_id|        city|                name|review_count|stars|cool|               date|funny|           review_id|review_stars|                text|useful|         remove_punc|               words|            filtered|         wordVectors|\n",
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|--hF_3v1JmU9nlu4z...|Indianapolis|Green District Sa...|          15|  4.5|   0|2021-09-27 17:09:07|    0|nHE232u-JXD0uHo2n...|         5.0|Really good selec...|     0|really good selec...|[really, good, se...|[really, good, se...|[6.73139416095283...|\n",
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "only showing top 1 row\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train_df, test_df = data_Indianapolis.randomSplit([0.8, 0.2])\n",
    "\n",
    "train_df.show(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.classification import LogisticRegression\n",
    "\n",
    "# Set parameters for Logistic Regression\n",
    "lgr = LogisticRegression(maxIter=10, featuresCol = 'wordVectors', labelCol='review_stars')\n",
    "\n",
    "# Fit the model to the data.\n",
    "lgrm = lgr.fit(train_df)\n",
    "\n",
    "# Given a dataset, predict each point's label, and show the results.\n",
    "predictions = lgrm.transform(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.932201043060876\n",
      "0.930917206312561\n"
     ]
    }
   ],
   "source": [
    "#print evaluation metrics\n",
    "evaluator = MulticlassClassificationEvaluator(labelCol=\"review_stars\", predictionCol=\"prediction\")\n",
    "\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"accuracy\"}))\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"f1\"}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "143857"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tampa\n",
    "data_Tampa = all_reviews.filter(all_reviews.city == 'Tampa')\n",
    "data_Tampa.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Tampa = data_Tampa.withColumn(\"remove_punc\",removePunctuation(col('text')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Tampa = pipeline.fit(data_Tampa).transform(data_Tampa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-----+-----------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|         business_id| city|             name|review_count|stars|cool|               date|funny|           review_id|review_stars|                text|useful|         remove_punc|               words|            filtered|         wordVectors|\n",
      "+--------------------+-----+-----------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|-1oygVebK81K8JEPI...|Tampa|Bruegger's Bagels|          72|  4.0|   0|2013-12-02 17:30:13|    0|QF2BUrPoo9SqJHs2n...|         5.0|Perfect downtown ...|     0|perfect downtown ...|[perfect, downtow...|[perfect, downtow...|[-0.2680578664876...|\n",
      "+--------------------+-----+-----------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "only showing top 1 row\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train_df, test_df = data_Tampa.randomSplit([0.8, 0.2])\n",
    "\n",
    "train_df.show(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set parameters for Logistic Regression\n",
    "lgr = LogisticRegression(maxIter=10, featuresCol = 'wordVectors', labelCol='review_stars')\n",
    "\n",
    "# Fit the model to the data.\n",
    "lgrm = lgr.fit(train_df)\n",
    "\n",
    "# Given a dataset, predict each point's label, and show the results.\n",
    "predictions = lgrm.transform(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9301804168856191\n",
      "0.9287711544173773\n"
     ]
    }
   ],
   "source": [
    "#print evaluation metrics\n",
    "evaluator = MulticlassClassificationEvaluator(labelCol=\"review_stars\", predictionCol=\"prediction\")\n",
    "\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"accuracy\"}))\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"f1\"}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "153433"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Nashville\n",
    "data_Nashville = all_reviews.filter(all_reviews.city == 'Nashville')\n",
    "data_Nashville.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Nashville = data_Nashville.withColumn(\"remove_punc\",removePunctuation(col('text')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Nashville = pipeline.fit(data_Nashville).transform(data_Nashville)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+---------+---------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|         business_id|     city|     name|review_count|stars|cool|               date|funny|           review_id|review_stars|                text|useful|         remove_punc|               words|            filtered|         wordVectors|\n",
      "+--------------------+---------+---------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|-3Xl8nSBSjaPpftsS...|Nashville|Taco Bell|           7|  4.5|   0|2014-09-13 12:42:25|    0|PqSK4fKhxctGC0p3a...|         5.0|3 pm crew on 12 S...|     0|3 pm crew on 12 s...|[3, pm, crew, on,...|[3, pm, crew, 12,...|[-0.0260079797925...|\n",
      "+--------------------+---------+---------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "only showing top 1 row\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train_df, test_df = data_Nashville.randomSplit([0.8, 0.2])\n",
    "\n",
    "train_df.show(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set parameters for Logistic Regression\n",
    "lgr = LogisticRegression(maxIter=10, featuresCol = 'wordVectors', labelCol='review_stars')\n",
    "\n",
    "# Fit the model to the data.\n",
    "lgrm = lgr.fit(train_df)\n",
    "\n",
    "# Given a dataset, predict each point's label, and show the results.\n",
    "predictions = lgrm.transform(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9316233723745337\n",
      "0.929713971398868\n"
     ]
    }
   ],
   "source": [
    "#print evaluation metrics\n",
    "evaluator = MulticlassClassificationEvaluator(labelCol=\"review_stars\", predictionCol=\"prediction\")\n",
    "\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"accuracy\"}))\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"f1\"}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "259509"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Philadelphia\n",
    "data_Philadelphia = all_reviews.filter(all_reviews.city == 'Philadelphia')\n",
    "data_Philadelphia.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Philadelphia = data_Philadelphia.withColumn(\"remove_punc\",removePunctuation(col('text')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Philadelphia = pipeline.fit(data_Philadelphia).transform(data_Philadelphia)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|         business_id|        city|                name|review_count|stars|cool|               date|funny|           review_id|review_stars|                text|useful|         remove_punc|               words|            filtered|         wordVectors|\n",
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|-0TffRSXXIlBYVbb5...|Philadelphia|IndeBlue Modern I...|        1097|  4.5|   0|2013-06-06 14:25:00|    0|qhvXpArerBmPDmP44...|         5.0|So a few friends ...|     6|so a few friends ...|[so, a, few, frie...|[friends, able, s...|[0.07549287176865...|\n",
      "+--------------------+------------+--------------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "only showing top 1 row\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train_df, test_df = data_Philadelphia.randomSplit([0.8, 0.2])\n",
    "\n",
    "train_df.show(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set parameters for Logistic Regression\n",
    "lgr = LogisticRegression(maxIter=10, featuresCol = 'wordVectors', labelCol='review_stars')\n",
    "\n",
    "# Fit the model to the data.\n",
    "lgrm = lgr.fit(train_df)\n",
    "\n",
    "# Given a dataset, predict each point's label, and show the results.\n",
    "predictions = lgrm.transform(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8748819732151459\n",
      "0.8633627829377362\n"
     ]
    }
   ],
   "source": [
    "#print evaluation metrics\n",
    "evaluator = MulticlassClassificationEvaluator(labelCol=\"review_stars\", predictionCol=\"prediction\")\n",
    "\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"accuracy\"}))\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"f1\"}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "114269"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Tucson\n",
    "data_Tucson = all_reviews.filter(all_reviews.city == 'Tucson')\n",
    "data_Tucson.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Tucson = data_Tucson.withColumn(\"remove_punc\",removePunctuation(col('text')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_Tucson = pipeline.fit(data_Tucson).transform(data_Tucson)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+------+-----------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|         business_id|  city|             name|review_count|stars|cool|               date|funny|           review_id|review_stars|                text|useful|         remove_punc|               words|            filtered|         wordVectors|\n",
      "+--------------------+------+-----------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "|-1MhPXk1FglglUAmu...|Tucson|Red Garter Saloon|         107|  4.0|   0|2012-03-20 16:20:07|    0|I47ax6CaNi84uXE1u...|         5.0|I had lunch here ...|     1|i had lunch here ...|[i, had, lunch, h...|[lunch, recently,...|[0.00988576303873...|\n",
      "+--------------------+------+-----------------+------------+-----+----+-------------------+-----+--------------------+------------+--------------------+------+--------------------+--------------------+--------------------+--------------------+\n",
      "only showing top 1 row\n",
      "\n"
     ]
    }
   ],
   "source": [
    "train_df, test_df = data_Tucson.randomSplit([0.8, 0.2])\n",
    "\n",
    "train_df.show(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set parameters for Logistic Regression\n",
    "lgr = LogisticRegression(maxIter=10, featuresCol = 'wordVectors', labelCol='review_stars')\n",
    "\n",
    "# Fit the model to the data.\n",
    "lgrm = lgr.fit(train_df)\n",
    "\n",
    "# Given a dataset, predict each point's label, and show the results.predictions = lgrm.transform(test_df)\n",
    "predictions = lgrm.transform(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9100367197062423\n",
      "0.9087573200539562\n"
     ]
    }
   ],
   "source": [
    "#print evaluation metrics\n",
    "evaluator = MulticlassClassificationEvaluator(labelCol=\"review_stars\", predictionCol=\"prediction\")\n",
    "\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"accuracy\"}))\n",
    "print(evaluator.evaluate(predictions, {evaluator.metricName: \"f1\"}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pySpark 4G 8e",
   "language": "python",
   "name": "pyspark2_4g8e"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
